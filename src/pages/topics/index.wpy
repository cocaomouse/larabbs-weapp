<style lang="less">
   /* 分类 案例来自wepy-weui-demo */
  .weui-flex {
    align-items: center;
  }
  .weui-cells {
    margin-top: 0;
    opacity: 0;
    transition: .3s;
    &:before, &:after {
        display: none;
    }
    &_show {
        opacity: 1;
    }
  }
  .weui-cell {
    &:before {
        right: 15px;
    }
  }
  .category-list__item {
    margin: 10px 0;
    background-color: #FFFFFF;
    border-radius: 2px;
    overflow: hidden;
    &:first-child {
        margin-top: 0;
    }
  }
  .category-list__item_selected {
    background-color: #eeeeee;
  }
  .category-list__img {
    width: 30px;
    height: 30px;
  }
  .category-list__item-hd {
    padding: 20px;
    transition: opacity .3s;
    &_show {
        opacity: .4;
    }
  }
  .category-list__item-bd {
    height: 0;
    overflow: hidden;
    &_show {
        height: auto;
    }
  }
</style>
<template>
  <div class="page">
    <div class="page__bd">
      <div class="category-list__item">
        <div class="weui-flex category-list__item-hd" @tap="categorisToggle">
            <div class="weui-flex__item page-title">{{ currentCategoryName }}</div>
            <image class="category-list__img" src="/assets/images/category-normal.png" />
        </div>
        <div class="category-list__item-bd"
             :class="{'category-list__item-bd_show' : categoryOpen}">
          <div class="weui-cells" :class="{ 'weui-cells_show' : categoryOpen}">
            <div @tap="changeCategory" class="weui-cell weui-cell_access" :class="{'category-list__item_selected' : !currentCategoryId }">
              <div class="weui-cell__bd">话题</div>
            </div>
            <div v-for="category in categories" :key="category.id">
              <div @tap="changeCategory(category)"
                class="weui-cell weui-cell_access"
                :class="{'category-list__item_selected': currentCategoryId == category.id}">
                <div class="weui-cell__bd">{{ category.name }}</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <topic-list :topics="topics" :no-more-data="noMoreData"></topic-list>
    </div>
  </div>
</template>

<config>
{
  enablePullDownRefresh: true,
  usingComponents: {
    "topic-list": "~@/components/topic-list"
  }
}
</config>

<script>
  import wepy from '@wepy/core'
  import { getTopics, getCategories } from '@/api/topic'

  wepy.page({
    data: {
      // 话题数据
      topics: [],
      // 分类数据
      categories: [],
      // 设置当前的分类
      currentCategory: {},
      // 控制是否显示分类
      categoryOpen: false,
      // 当前分页
      page: 1,
      // 是否还有更多数据
      noMoreData: false,
      // 是否在加载中
      isLoading: false
    },
    /* 计算属性 currentCategoryId 和 currentCategoryName */
    computed: {
      currentCategoryId() {
        return this.currentCategory.id || null
      },
      currentCategoryName() {
        return this.currentCategory.name || '话题'
      }
    },
    // onLoad()方法中,loadTopics()方法只会触发一次
    async onLoad() {
      this.loadTopics()
      this.loadCategories()
    },
    // 因为下拉刷新其实是重置话题数据，
    // 所以调用时使用 this.loadTopics(true)，
    // 覆盖当前的 topics 数据，
    // 最后调用 stopPullDownRefresh 停止刷新。
    async onPullDownRefresh() {
      this.page = 1
      this.noMoreData = false
      await this.loadTopics(true)
      wx.stopPullDownRefresh()
    },
    // 页面滚动到底部时触发
    // 如果 noMoreData 为 true 则直接返回，
    // 否则将页数 page 加 1，然后获取下一页的话题数据；
    async onReachBottom() {
      // 如果没有更多内容，直接返回
      if (this.noMoreData || this.isLoading) {
        return
      }
      this.isLoading = true
      this.page += 1
      await this.loadTopics()
      this.isLoading = false
    },
    methods: {
      // 获取话题数据
      // reset,是否重置数据,
      // 为true,则替换现有数据,
      // 为false,则在当前数据下面添加新的数据
      async loadTopics(reset = false) {
        let params = {
          page: this.page,
          include: 'user,category'
        }
        if (this.currentCategoryId) {
          params['filter[category_id]'] = this.currentCategoryId
        }

        // 请求话题列表接口
        const topicsResponse = await getTopics(params)
        // 将数据合并到 this.topics
        this.topics = reset ? topicsResponse.data.data : this.topics.concat(topicsResponse.data.data)
        const pagination = topicsResponse.data.meta
        // 根据分页设置是否还有更多数据
        if (pagination.current_page === pagination.last_page) {
          this.noMoreData = true
        }
      },
      async loadCategories() {
        // 从缓存中获取分类数据
        let categories = wx.getStorageSync('categories')

        if (!categories) {
          const categoriesResponse = await getCategories()
          categories = categoriesResponse.data.data
          wx.setStorageSync('categories', categories);
        }
        this.categories = categories
      },
      categorisToggle() {
        this.categoryOpen = !this.categoryOpen
      },
      // 设置当前的分类
      async changeCategory(category = {}) {
        this.currentCategory = category
        this.categoryOpen = false
        this.page = 1
        // 设置reset为true
        this.loadTopics(true)
      },
    }
  })
</script>
